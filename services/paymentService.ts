// Payment service for PayPal integration
export interface PaymentOrder {
  orderId: string;
  links: Array<{
    href: string;
    rel: string;
    method: string;
  }>;
}

export interface PaymentCapture {
  success: boolean;
  message: string;
  captureId?: string;
}
export interface PaymentVerification {
  verified: boolean;
  payment?: any;
}

export interface UserPayment {
  id?: string; // Auto-generated by DB
  user_id: string; // References users.id (string)
  paypal_order_id: string;
  paypal_capture_id?: string;
  amount: number; // DECIMAL(10,2) in database
  status: 'pending' | 'completed' | 'failed';
  created_at?: string;
  completed_at?: string;
}

class PaymentService {
  private baseUrl: string;

  constructor() {
    this.baseUrl = process.env.NODE_ENV === 'production' 
      ? 'https://create-a-date.netlify.app/.netlify/functions' 
      : '/.netlify/functions';
  }

  private async request(endpoint: string, data: any) {
    const response = await fetch(`${this.baseUrl}/${endpoint}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || 'Payment request failed');
    }

    return response.json();
  }

  async createOrder(userId: string): Promise<PaymentOrder> {
    return this.request('payment-service', {
      action: 'create-order',
      userId,
      amount: '10.00'
    });
  }

  async captureOrder(orderId: string, userId: string): Promise<PaymentCapture> {
    return this.request('payment-service', {
      action: 'capture-payment',
      orderId,
      userId
    });
  }

  async verifyPayment(orderId: string, userId: string): Promise<PaymentVerification> {
    return this.request('payment-service', {
      action: 'verify-payment',
      orderId,
      userId
    });
  }

  async getUserPayments(userId: string): Promise<{ payments: UserPayment[] }> {
    return this.request('payment-service', {
      action: 'get-user-payments',
      userId
    });
  }
}

export const paymentService = new PaymentService();